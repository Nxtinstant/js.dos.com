create-dosbox

npx create-dosbox my-app
cd my-app
npm install
npm start
---
Open localhost:8080 in browser
my-app
├── package.json
└── _site
    ├── js-dos
    ├── bundle.jsdos
    └── index.html
    cd my-app
    npm install
npm start
iframe.focus();

<!doctype html>
<html>

<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <style>
        html,
        body,
        #jsdos {
            width: 100%;
            height: 100%;
            padding: 0;
            margin: 0;
            border: none;
            overflow: hidden;
        }
    </style>
</head>

<body>
    <iframe id="jsdos" frameborder="0"
        src="https://dos.zone/player/?bundleUrl=https%3A%2F%2Fcdn.dos.zone%2Foriginal%2F2X%2F2%2F24b00b14f118580763440ecaddcc948f8cb94f14.jsdos&anonymous=1"
        allowfullscreen>
    </iframe>
    <script>
        window.onload = () => {
            document.getElementById("jsdos").focus();

            window.addEventListener("message", (e) => {
                if (e.data.message === "dz-player-exit") {
                    document.getElementById("jsdos").style.display = "none";
                    alert("js-dos exited");
                }
            });
        };
    </script>
</body>

</html>
    const clientIdListener = async (e: any) => {
        if (e.data.message !== "dz-client-id") {
            return;
        }
        const gesture = e.data.gesture;

        let user = getLoggedUser();
        if (user === null && gesture) {
            user = await login();
        }

        if (user === null) {
            iframe.contentWindow?.postMessage({
                message: "dz-client-id-response",
            }, "*");
        } else {
            iframe.contentWindow?.postMessage({
                message: "dz-client-id-response",
                namespace: user.namespace,
                id: user.id,
            }, "*");
        }
    };

    window.addEventListener("message", clientIdListener);
    
    Dos(document.getElementById("jsdos")).run("some.jsdos");
    
    emulators.pathPrefix = "<some-path>/";
    
    <script src="<path>/js-dos.js"></script>
<link href="<path>/js-dos.css" rel="stylesheet">
// ...
<script>
  emulators.pathPrefix = "<path>/";
  Dos(<element>).run(<bundleUrl>);
  
  <!doctype html>
<html>
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
        <style>
         html, body, #jsdos {
             width: 100%;
             height: 100%;
             margin: 0;
             padding: 0;
         }
        </style>
        <script src="/v7/build/releases/latest/js-dos/js-dos.js"></script>
        <link href="/v7/build/releases/latest/js-dos/js-dos.css" rel="stylesheet">
    </head>
    <body>
        <div id="jsdos" />
        <script>
         emulators.pathPrefix = "/v7/build/releases/latest/js-dos/";
         Dos(document.getElementById("jsdos"))
             .run("https://cdn.dos.zone/original/2X/2/24b00b14f118580763440ecaddcc948f8cb94f14.jsdos");
        </script>
    </body>
</html>

<script src="emulators/emulators.js"></script>
<script src="emulators-ui/emulators-ui.js"></script>
<link rel="stylesheet" href="emulators-ui/emulators-ui.css">

npm init
npm install --save emulators jimp
curl https://cdn.dos.zone/original/2X/2/24b00b14f118580763440ecaddcc948f8cb94f14.jsdos -o digger.jsdos

const fs = require("fs");
const jimp = require("jimp");

require("emulators");

const emulators = global.emulators;
emulators.pathPrefix = "./";

const bundle = fs.readFileSync("digger.jsdos");

emulators
    .dosDirect(bundle)
    .then((ci) => {
      // ...
    });
    
        ci.events().onFrame((rgb, rgba) => {
        // use rgb or rgba image data
    });
    
        const width = ci.width();
    const height = ci.height();
    
    for (let next = 3; next < width * height * 4; next = next + 4) {
        rgba[next] = 255;
    }

    new jimp({ data: rgba, width, height }, (err, image) => {
        image.write("./screenshot.png", () => {
            ci.exit();
        });
    });
    
        const width = ci.width();
    const height = ci.height();
    
    for (let next = 3; next < width * height * 4; next = next + 4) {
        rgba[next] = 255;
    }

    new jimp({ data: rgba, width, height }, (err, image) => {
        image.write("./screenshot.png", () => {
            ci.exit();
        });
    });
    
  const fs = require("fs");
const jimp = require("jimp");

require("emulators");

const emulators = global.emulators;
emulators.pathPrefix = "./";

const bundle = fs.readFileSync("digger.jsdos");

emulators
    .dosDirect(bundle)
    .then((ci) => {
        let rgba = new Uint8Array(0);
        ci.events().onFrame((_, _rgba) => {
            rgba = _rgba;
        });

        // capture the screen after 3 sec
        console.log("Will capture screen after 3 sec...");
        setTimeout(() => {
            const width = ci.width();
            const height = ci.height();

            for (let next = 3; next < width * height * 4; next = next + 4) {
                rgba[next] = 255;
            }           

            new jimp({ data: rgba, width, height }, (err, image) => {
                image.write("./screenshot.png", () => {
                    ci.exit();
                });
            });
        }, 3000);
    })
    .catch(console.error);
    
    
